// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: openinventorymanager.proto

package openinventorymanager

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	InventoryManager_CreateItem_FullMethodName = "/openinventorymanager.InventoryManager/CreateItem"
	InventoryManager_GetItem_FullMethodName    = "/openinventorymanager.InventoryManager/GetItem"
	InventoryManager_ListItems_FullMethodName  = "/openinventorymanager.InventoryManager/ListItems"
)

// InventoryManagerClient is the client API for InventoryManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service definition
type InventoryManagerClient interface {
	CreateItem(ctx context.Context, in *ItemInput, opts ...grpc.CallOption) (*ItemOutput, error)
	GetItem(ctx context.Context, in *GetItemRequest, opts ...grpc.CallOption) (*ItemOutput, error)
	ListItems(ctx context.Context, in *ListItemsRequest, opts ...grpc.CallOption) (*ListItemsResponse, error)
}

type inventoryManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewInventoryManagerClient(cc grpc.ClientConnInterface) InventoryManagerClient {
	return &inventoryManagerClient{cc}
}

func (c *inventoryManagerClient) CreateItem(ctx context.Context, in *ItemInput, opts ...grpc.CallOption) (*ItemOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ItemOutput)
	err := c.cc.Invoke(ctx, InventoryManager_CreateItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryManagerClient) GetItem(ctx context.Context, in *GetItemRequest, opts ...grpc.CallOption) (*ItemOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ItemOutput)
	err := c.cc.Invoke(ctx, InventoryManager_GetItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryManagerClient) ListItems(ctx context.Context, in *ListItemsRequest, opts ...grpc.CallOption) (*ListItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListItemsResponse)
	err := c.cc.Invoke(ctx, InventoryManager_ListItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InventoryManagerServer is the server API for InventoryManager service.
// All implementations must embed UnimplementedInventoryManagerServer
// for forward compatibility.
//
// Service definition
type InventoryManagerServer interface {
	CreateItem(context.Context, *ItemInput) (*ItemOutput, error)
	GetItem(context.Context, *GetItemRequest) (*ItemOutput, error)
	ListItems(context.Context, *ListItemsRequest) (*ListItemsResponse, error)
	mustEmbedUnimplementedInventoryManagerServer()
}

// UnimplementedInventoryManagerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedInventoryManagerServer struct{}

func (UnimplementedInventoryManagerServer) CreateItem(context.Context, *ItemInput) (*ItemOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateItem not implemented")
}
func (UnimplementedInventoryManagerServer) GetItem(context.Context, *GetItemRequest) (*ItemOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetItem not implemented")
}
func (UnimplementedInventoryManagerServer) ListItems(context.Context, *ListItemsRequest) (*ListItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListItems not implemented")
}
func (UnimplementedInventoryManagerServer) mustEmbedUnimplementedInventoryManagerServer() {}
func (UnimplementedInventoryManagerServer) testEmbeddedByValue()                          {}

// UnsafeInventoryManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InventoryManagerServer will
// result in compilation errors.
type UnsafeInventoryManagerServer interface {
	mustEmbedUnimplementedInventoryManagerServer()
}

func RegisterInventoryManagerServer(s grpc.ServiceRegistrar, srv InventoryManagerServer) {
	// If the following call pancis, it indicates UnimplementedInventoryManagerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&InventoryManager_ServiceDesc, srv)
}

func _InventoryManager_CreateItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ItemInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryManagerServer).CreateItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryManager_CreateItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryManagerServer).CreateItem(ctx, req.(*ItemInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryManager_GetItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryManagerServer).GetItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryManager_GetItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryManagerServer).GetItem(ctx, req.(*GetItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryManager_ListItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryManagerServer).ListItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryManager_ListItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryManagerServer).ListItems(ctx, req.(*ListItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InventoryManager_ServiceDesc is the grpc.ServiceDesc for InventoryManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InventoryManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "openinventorymanager.InventoryManager",
	HandlerType: (*InventoryManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateItem",
			Handler:    _InventoryManager_CreateItem_Handler,
		},
		{
			MethodName: "GetItem",
			Handler:    _InventoryManager_GetItem_Handler,
		},
		{
			MethodName: "ListItems",
			Handler:    _InventoryManager_ListItems_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "openinventorymanager.proto",
}
